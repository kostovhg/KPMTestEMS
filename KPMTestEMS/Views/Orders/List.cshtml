@model IEnumerable<KPMTestEMS.Models.ClientOrder>
    
@{
    ViewBag.Title = "List";
    ViewData["Title"] = "List client orders";

    //string currentFilter = ViewBag.CurrentFilter;
    //string currentSort = ViewBag.CurrentSort;
    //if (string.IsNullOrEmpty(currentSort))
    //{
    //    currentSort = "date_desc";
    //}
}

<h2>List</h2>

@*<p>
    <a asp-action="Create New"</a>
</p>*@

<div class="wrapper">
    <form action="List" method="get">
        <div class="form-actions no-color">
            <p>
                Find by Company name, User full name or email:
                <input type="text" name="SearchString" placeholder="Search..." value="@ViewData["currentFilter"]" />
                <input type="submit" value="Search" class="btn btn-default" />
            </p>
        </div>
    </form>

    <div class="table-responsive">
        <table class="table table-striped table-condensed table-hover">
            <tr>
                <th>
                    #
                </th>
                <th>
                    @Html.ActionLink("Date", "List", new { sortOrder = ViewBag.DateSortParam })
                    @*@Html.DisplayNameFor(m => m.DueDate)*@
                </th>
                <th>
                    @Html.ActionLink("Client", "List", new { sortOrder = ViewBag.ClientSortParam})
                    @*@Html.DisplayNameFor(m => m.Client.Company)*@
                </th>
                <th>
                    @Html.ActionLink("Quantity", "List", new { sortOrder = ViewBag.QuantitySortParam })
                    @*@Html.DisplayNameFor(m => m.Quantity)*@
                </th>
                <th>
                    @Html.ActionLink("Brand", "List", new { sortOrder = ViewBag.BrandSortParam })
                    @*@Html.DisplayNameFor(m => m.Quantity)*@
                </th>
                <th>
                    @Html.ActionLink("Weight", "List", new { sortOrder = ViewBag.WeightSortParam })
                    @*@Html.DisplayNameFor(m => m.Quantity)*@
                </th>
                <th>
                    @Html.ActionLink("Width", "List", new { sortOrder = ViewBag.QuantitySortParam })
                    @*@Html.DisplayNameFor(m => m.Quantity)*@
                </th>
                <th>
                    @Html.ActionLink("Status", "List", new { sortOrder = ViewBag.QuantitySortParam })
                    @*@Html.DisplayNameFor(m => m.Quantity)*@
                </th>
                <th>Options</th>
            </tr>
            <tbody>
                @foreach (var item in Model)
                {
                    string classType = "";
                    switch (item.Status)
                    {
                        case "Pending":
                                classType = "active"; break;
                        case "Active":
                                classType = "success"; break;
                        case "Edited":
                                classType = "warning"; break;
                        default:
                            break;
                    }
                    <tr class="@classType">
                        <td>
                            @Html.DisplayFor(modelItem => item.ID)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.DueDate)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.Client.Company)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.Quantity)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.Brand.PaperBrand)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.Weight.PaperWeight)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.Width.PaperWidth)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.Status)
                        </td>

                        <td>
                            @Html.ActionLink("View", "Edit", "Orders", new { @id = item.ID }, new { @class = "btn btn-info btn-xs" })
                            @Html.ActionLink("Edit", "Edit", "Orders", new { @id = item.ID }, new { @class="btn btn-warning btn-xs" })
                            @Html.ActionLink("Details", "Delete", "User", new { @id = item.ID }, new { @class = "btn btn-danger btn-xs" })
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
    @*@if (Model.PageCount > 1)
    {
        <div class="pager">
            @Html.PagedListPager(Model, page => Url.Action("Index", new
   {
       page,
       sortOrder = ViewBag.currentSort,
       q = currentSearch
   }))
            Page @(Model.PageCount < Model.PageNumber ? 0 : Model.PageNumber) of @Model.PageCount
        </div>
    }*@
</div>



